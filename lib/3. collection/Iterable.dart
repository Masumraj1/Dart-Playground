// ===============================
// Dart Iterable (Bangla Explainer)
// ===============================

void main() {
  // ===============================
  // 1я╕ПтГг Iterable ржХрзА?
  // ===============================
  /*
  Dart ржП ржЕржирзЗржХ collection type ржерж╛ржХрзЗ ржпрзЗржоржи List, Set, Mapред
  ржПржЧрзБрж▓рзЛ ржоржзрзНржпрзЗ ржПржХ ржмрж╛ ржПржХрж╛ржзрж┐ржХ element ржирж┐ржпрж╝рзЗ data рж░рж╛ржЦрж╛ рж╣ржпрж╝ред

  ЁЯФ╣ Iterable рж╣рж▓рзЛ ржПржоржи ржПржХржЯрж┐ object ржпрж╛ ржПржХржмрж╛рж░рзЗ ржПржХржЯрж┐ element access ржХрж░рж╛рж░ рж╕рзБржмрж┐ржзрж╛ ржжрзЗржпрж╝ред
  ЁЯФ╣ рж╕рж╣ржЬ ржХржерж╛ржпрж╝, ржпрзЗржХрзЛржирзЛ collection ржпрзЗржЯрж╛ iteration ржХрж░рж╛ ржпрж╛ржпрж╝, рждрж╛ рж╣рж▓рзЛ Iterableред
  */

  // ===============================
  // 2я╕ПтГг List is an Iterable
  // ===============================
  List<int> numbers = [1, 2, 3, 4, 5];

  // List рж╣рж▓рзЛ Iterable, рждрж╛ржЗ ржЖржорж░рж╛ for-in loop ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рж┐
  for (var n in numbers) {
    print(n);
  }

  // ===============================
  // 3я╕ПтГг Iterable ржПрж░ Common Properties & Methods
  // ===============================
  /*
  ЁЯФ╣ length      - ржХрждржЧрзБрж▓рзЛ element ржЖржЫрзЗ
  ЁЯФ╣ isEmpty     - empty ржХрж┐ржирж╛
  ЁЯФ╣ isNotEmpty  - empty ржиржпрж╝
  ЁЯФ╣ first       - ржкрзНрж░ржержо element
  ЁЯФ╣ last        - рж╢рзЗрж╖ element
  ЁЯФ╣ contains(x) - element ржЖржЫрзЗ ржХрж┐ржирж╛
  ЁЯФ╣ map()       - element ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзЗ ржирждрзБржи Iterable
  ЁЯФ╣ where()     - condition ржЕржирзБрж╕рж╛рж░рзЗ filter
  ЁЯФ╣ reduce()    - рж╕ржм element combine ржХрж░рж╛
  ЁЯФ╣ forEach()   - element ржЧрзБрж▓рзЛ loop ржХрж░рж╛
  */

  print(numbers.length);     // Output: 5
  print(numbers.isEmpty);    // Output: false
  print(numbers.isNotEmpty); // Output: true
  print(numbers.first);      // Output: 1
  print(numbers.last);       // Output: 5
  print(numbers.contains(3)); // Output: true

  // ===============================
  // 4я╕ПтГг map() тАУ Transform each element
  // ===============================
  var squares = numbers.map((n) => n * n);
  print(squares.toList()); // Output: [1, 4, 9, 16, 25]

  // ===============================
  // 5я╕ПтГг where() тАУ Filter elements
  // ===============================
  var evenNumbers = numbers.where((n) => n % 2 == 0);
  print(evenNumbers.toList()); // Output: [2, 4]

  // ===============================
  // 6я╕ПтГг reduce() тАУ Combine elements
  // ===============================
  var sum = numbers.reduce((a, b) => a + b);
  print(sum); // Output: 15

  // ===============================
  // 7я╕ПтГг forEach() тАУ Iterate elements
  // ===============================
  numbers.forEach((n) => print('Number: $n'));

  // ===============================
  // 8я╕ПтГг Iterable.generate()
  // ===============================
  /*
  ржирждрзБржи Iterable рждрзИрж░рж┐ ржХрж░рж╛рж░ ржЬржирзНржп generate ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛рзЯ
  */
  var squares2 = Iterable.generate(5, (i) => (i + 1) * (i + 1));
  print(squares2.toList()); // Output: [1, 4, 9, 16, 25]

  // ===============================
  // 9я╕ПтГг take() & skip()
  // ===============================
  var firstThree = numbers.take(3);
  var skipTwo = numbers.skip(2);

  print(firstThree.toList()); // Output: [1, 2, 3]
  print(skipTwo.toList());    // Output: [3, 4, 5]

  // ===============================
  // ЁЯФЯ Iterable to List/Set
  // ===============================
  var numberList = numbers.toList();
  var numberSet = numbers.toSet();

  print(numberList); // Output: [1, 2, 3, 4, 5]
  print(numberSet);  // Output: {1, 2, 3, 4, 5}

  // ===============================
  // 1я╕ПтГг1я╕ПтГг Infinite Iterable
  // ===============================
  /*
  Iterable.generate ржмрж╛ Iterable.periodic ржжрж┐рзЯрзЗ infinite Iterable рждрзИрж░рж┐ ржХрж░рж╛ ржпрж╛рзЯ
  */
  var infiniteNumbers = Iterable.generate(10, (i) => i + 1); // technically finite here
  print(infiniteNumbers.toList()); // Output: [1,2,3,...,10]

  // ===============================
  // 1я╕ПтГг2я╕ПтГг Summary (рж╕рж╛рж░рж╕ржВржХрзНрж╖рзЗржк)
  // ===============================
  /*
  ЁЯзй Dart Iterable Summary:
  -----------------------------------------
  ЁЯФ╣ Iterable рж╣рж▓рзЛ collection ржпрж╛ iteration support ржХрж░рзЗ
  ЁЯФ╣ Common Iterable types: List, Set
  ЁЯФ╣ Common Methods: map(), where(), reduce(), forEach(), take(), skip()
  ЁЯФ╣ Iterable.generate() ржжрж┐рзЯрзЗ ржирждрзБржи Iterable рждрзИрж░рж┐ ржХрж░рж╛ ржпрж╛рзЯ
  ЁЯФ╣ Iterable.lazy evaluation ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ memory efficient code рж▓рзЗржЦрж╛ ржпрж╛рзЯ
  ЁЯФ╣ Iterable.toList() / toSet() ржжрж┐рзЯрзЗ collection ржП convert ржХрж░рж╛ ржпрж╛рзЯ
  -----------------------------------------
  */
}
