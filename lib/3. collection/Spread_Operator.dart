// ===============================
// Dart Spread Operator (Bangla Explainer)
// ===============================

void main() {
  // ===============================
  // 1Ô∏è‚É£ Spread Operator ‡¶ï‡ßÄ?
  // ===============================
  /*
  üîπ Spread Operator ‡¶π‡¶≤‡ßã `...` symbol ‡¶Ø‡¶æ Dart ‡¶è collection ‡¶è‡¶∞ elements ‡¶Ö‡¶®‡ßç‡¶Ø collection ‡¶è add ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡•§
  üîπ ‡¶è‡¶ü‡¶æ ‡¶Æ‡ßÇ‡¶≤‡¶§ list, set, map merge ‡¶¨‡¶æ copy ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶¨‡¶á convenient‡•§
  */

  // ===============================
  // 2Ô∏è‚É£ Basic List Spread
  // ===============================
  List<int> list1 = [1, 2, 3];
  List<int> list2 = [0, ...list1, 4, 5];

  print(list2); // Output: [0, 1, 2, 3, 4, 5]

  // ===============================
  // 3Ô∏è‚É£ Conditional Spread (Null-aware spread)
  // ===============================
  /*
  ‡¶ï‡¶ñ‡¶®‡ßã ‡¶ï‡¶ñ‡¶®‡ßã list null ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá, ‡¶§‡¶ñ‡¶® `...?` ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü
  */
  List<int>? nullableList;
  List<int> list3 = [100, ...?nullableList, 200];

  print(list3); // Output: [100, 200]

  // ===============================
  // 4Ô∏è‚É£ Spread in Set
  // ===============================
  Set<int> set1 = {1, 2, 3};
  Set<int> set2 = {0, ...set1, 4};

  print(set2); // Output: {0, 1, 2, 3, 4}  (Set auto removes duplicates)

  // ===============================
  // 5Ô∏è‚É£ Spread in Map
  // ===============================
  Map<String, int> map1 = {'a': 1, 'b': 2};
  Map<String, int> map2 = {'c': 3, ...map1};

  print(map2); // Output: {c: 3, a: 1, b: 2}

  // ===============================
  // 6Ô∏è‚É£ Combining Multiple Collections
  // ===============================
  List<int> listA = [1, 2];
  List<int> listB = [3, 4];
  List<int> combined = [0, ...listA, ...listB, 5];

  print(combined); // Output: [0, 1, 2, 3, 4, 5]

  // ===============================
  // 7Ô∏è‚É£ Nested Spread
  // ===============================
  List<List<int>> nestedList = [
    [1, 2],
    [3, 4]
  ];

  List<int> flatList = [0, ...nestedList.expand((x) => x)];
  print(flatList); // Output: [0, 1, 2, 3, 4]

  // ===============================
  // 8Ô∏è‚É£ Real-life Use Case
  // ===============================
  /*
  üîπ Default configuration merge ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü
  üîπ List ‡¶¨‡¶æ Set combine ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü
  üîπ Map merge ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü without writing loops
  */

  List<String> defaultTasks = ['Task1', 'Task2'];
  List<String> userTasks = ['Task3', 'Task4'];
  List<String> allTasks = [...defaultTasks, ...userTasks];

  print(allTasks); // Output: [Task1, Task2, Task3, Task4]

  // ===============================
  // 9Ô∏è‚É£ Summary (‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™)
  // ===============================
  /*
  üß© Dart Spread Operator Summary:
  -----------------------------------------
  üîπ Symbol: ... (Spread)
  üîπ Null-aware: ...? (for nullable collections)
  üîπ Can be used with List, Set, Map
  üîπ Merge multiple collections easily
  üîπ Avoids manual loops for adding elements
  üîπ Maintains type safety
  üîπ Set automatically removes duplicates
  üîπ Ideal for default + user data merge, configuration, UI elements, etc.
  -----------------------------------------
  */
}
