// ===============================
// Dart Error Handling (Bangla Explainer)
// ===============================

class InvalidPasswordException implements Exception {
  String cause;
  InvalidPasswordException(this.cause);
}

void main() {
  // ===============================
  // 1Ô∏è‚É£ Error Handling ‡¶ï‡ßÄ?
  // ===============================
  /*
  üîπ Program execution ‡¶ö‡¶≤‡¶æ‡¶ï‡¶æ‡¶≤‡ßÄ‡¶® runtime ‡¶è error ‡¶¨‡¶æ exception ‡¶ò‡¶ü‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§
  üîπ Error handling ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶è‡¶ó‡ßÅ‡¶≤‡ßã gracefully handle ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§
  üîπ Dart ‡¶è main error handling techniques:
      1. try / catch
      2. on
      3. finally
      4. throw
      5. custom exceptions
  */

  // ===============================
  // 2Ô∏è‚É£ try / catch Block
  // ===============================
  try {
    int result = 12 ~/ 0; // Division by zero
    print(result);
  } catch (e) {
    print('Error: $e'); // Output: Error: IntegerDivisionByZeroException
  }

  // ===============================
  // 3Ô∏è‚É£ catch with StackTrace
  // ===============================
  try {
    int result = 12 ~/ 0;
    print(result);
  } catch (e, s) {
    print('Error: $e');
    print('StackTrace: $s');
  }

  // ===============================
  // 4Ô∏è‚É£ on Keyword
  // ===============================
  try {
    int result = 12 ~/ 0;
    print(result);
  } on IntegerDivisionByZeroException {
    print('Cannot divide by zero!');
  }

  // ===============================
  // 5Ô∏è‚É£ finally Block
  // ===============================
  try {
    int result = 12 ~/ 3;
    print(result); // Output: 4
  } catch (e) {
    print('Error: $e');
  } finally {
    print('This will always execute');
  }

  // ===============================
  // 6Ô∏è‚É£ throw Keyword
  // ===============================
  void checkAge(int age) {
    if (age < 18) {
      throw Exception('Age must be 18 or above');
    } else {
      print('Age is valid');
    }
  }

  try {
    checkAge(15);
  } catch (e) {
    print('Caught Exception: $e');
  }

  // ===============================
  // 7Ô∏è‚É£ Custom Exception Usage
  // ===============================
  void validatePassword(String password) {
    if (password.length < 6) {
      throw InvalidPasswordException('Password too short');
    } else {
      print('Password is valid');
    }
  }

  try {
    validatePassword('123');
  } catch (e) {
    print('Error: $e');
  }

  // ===============================
  // 8Ô∏è‚É£ Multiple catch / on blocks
  // ===============================
  try {
    int result = 12 ~/ 0;
  } on IntegerDivisionByZeroException {
    print('Division by zero error');
  } on FormatException {
    print('Format Exception');
  } catch (e) {
    print('Other Error: $e');
  } finally {
    print('Finally always executes');
  }

  // ===============================
  // 9Ô∏è‚É£ rethrow Keyword
  // ===============================
  // ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá functionB declare
  void functionB() {
    throw Exception('Something went wrong in B');
  }

  // ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ functionA declare
  void functionA() {
    try {
      functionB(); // ‚úÖ ‡¶è‡¶ñ‡¶® ‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá
    } catch (e) {
      print('Caught in A: $e');
      rethrow;
    }
  }

  try {
    functionA();
  } catch (e) {
    print('Caught in main: $e');
  }

  // ===============================
  // üîü Summary (‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™)
  // ===============================
  /*
  üß© Dart Error Handling Summary:
  -----------------------------------------
  üîπ try / catch - basic error handling
  üîπ on - specific exception type handle ‡¶ï‡¶∞‡¶§‡ßá
  üîπ finally - always execute block
  üîπ throw - manually exception generate ‡¶ï‡¶∞‡¶æ
  üîπ rethrow - caught exception ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶Ø‡¶º throw ‡¶ï‡¶∞‡¶æ
  üîπ custom exception class ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º
  üîπ catch with StackTrace - error debugging ‡¶∏‡¶π‡¶ú ‡¶π‡¶Ø‡¶º
  üîπ Error handling program crash ‡¶ï‡¶Æ‡¶æ‡¶Ø‡¶º ‡¶è‡¶¨‡¶Ç safe execution ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßá
  -----------------------------------------
  */
}
