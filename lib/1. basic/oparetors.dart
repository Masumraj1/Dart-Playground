// ======================
// Dart Operators Master Guide (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶∏‡¶π)
// ======================

void main() {
  // ======================
  // 1Ô∏è‚É£ Arithmetic Operators (‡¶ó‡¶æ‡¶£‡¶ø‡¶§‡¶ø‡¶ï ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶ü‡¶∞)
  // ======================
  // ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡ßã‡¶ó, ‡¶¨‡¶ø‡ßü‡ßã‡¶ó, ‡¶ó‡ßÅ‡¶£, ‡¶≠‡¶æ‡¶ó ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø‡•§
  int a = 10;
  int b = 3;

  print('a = $a, b = $b');

  print('Addition: a + b = ${a + b}');       // 13
  print('Subtraction: a - b = ${a - b}');    // 7
  print('Multiplication: a * b = ${a * b}'); // 30
  print('Division: a / b = ${a / b}');       // 3.3333
  print('Integer Division: a ~/ b = ${a ~/ b}'); // 3
  print('Modulo: a % b = ${a % b}');         // 1

  // ======================
  // 2Ô∏è‚É£ Assignment Operators (‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∏‡¶æ‡¶á‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶ü‡¶∞)
  // ======================
  // ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: variable update ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
  int c = 5;
  print('Initial c = $c');

  c += 3; // c = c + 3
  print('c += 3 ‚Üí $c');

  c -= 2; // c = c - 2
  print('c -= 2 ‚Üí $c');

  c *= 2; // c = c * 2
  print('c *= 2 ‚Üí $c');

  c ~/= 3; // c = c ~/ 3
  print('c ~/= 3 ‚Üí $c');

  c %= 3; // c = c % 3
  print('c %= 3 ‚Üí $c');

  // ======================
  // 3Ô∏è‚É£ Comparison Operators (‡¶§‡ßÅ‡¶≤‡¶®‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶ü‡¶∞)
  // ======================
  // ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: ‡¶¶‡ßÅ‡¶á‡¶ü‡¶ø ‡¶Æ‡¶æ‡¶®‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶§‡ßÅ‡¶≤‡¶®‡¶æ ‡¶ï‡¶∞‡¶§‡ßá
  int x = 10, y = 20;

  print('x == y ‚Üí ${x == y}'); // false
  print('x != y ‚Üí ${x != y}'); // true
  print('x > y ‚Üí ${x > y}');   // false
  print('x < y ‚Üí ${x < y}');   // true
  print('x >= y ‚Üí ${x >= y}'); // false
  print('x <= y ‚Üí ${x <= y}'); // true

  // ======================
  // 4Ô∏è‚É£ Logical Operators (‡¶≤‡¶ú‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶ü‡¶∞)
  // ======================
  // ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: boolean ‡¶Æ‡¶æ‡¶®‡ßá‡¶∞ logical operation ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
  bool p = true;
  bool q = false;

  print('p && q ‚Üí ${p && q}'); // false
  print('p || q ‚Üí ${p || q}'); // true
  print('!p ‚Üí ${!p}');         // false

  // ======================
  // 5Ô∏è‚É£ Type Test Operators (‡¶ü‡¶æ‡¶á‡¶™ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ)
  // ======================
  // ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: variable ‡¶ï‡ßã‡¶® ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ ‡¶§‡¶æ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶§‡ßá
  var value = 100;

  print('value is int ‚Üí ${value is int}');       // true
  print('value is! String ‚Üí ${value is! String}'); // true

  // ======================
  // 6Ô∏è‚É£ Conditional / Ternary Operator (‡¶∂‡¶∞‡ßç‡¶§ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï)
  // ======================
  // ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: inline if-else
  int score = 85;
  String result = (score >= 50) ? 'Pass' : 'Fail';
  print('Result: $result');

  // ======================
  // 7Ô∏è‚É£ Null-aware Operators (‡¶®‡¶æ‡¶≤-‡¶∏‡ßÅ‡¶∞‡¶ï‡ßç‡¶∑‡¶æ ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶ü‡¶∞)
  // ======================
  // ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: null safe ‡¶ï‡ßã‡¶° ‡¶≤‡¶ø‡¶ñ‡¶§‡ßá
  String? name;
  print('Name ?? "Guest" ‚Üí ${name ?? "Guest"}'); // Guest

  name ??= 'Masum'; // ‡¶Ø‡¶¶‡¶ø null ‚Üí assign
  print('After ??= ‚Üí $name');

  // ======================
  // 8Ô∏è‚É£ Cascade Operator (..)
  // ======================
  // ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: object ‡¶è‡¶∞ multiple method/field call ‡¶è‡¶ï ‡¶≤‡¶æ‡¶á‡¶®‡ßá
  var buffer = StringBuffer();
  buffer
    ..write('Hello')
    ..write(' ')
    ..write('Dart!');
  print('Cascade Operator: ${buffer.toString()}');

  // ======================
  // 9Ô∏è‚É£ Bitwise Operators (‡¶¨‡¶ø‡¶ü ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶ü‡¶∞)
  // ======================
  // ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: binary level operation
  int m = 5;  // 0101
  int n = 3;  // 0011

  print('m & n ‚Üí ${m & n}');   // 1  (0101 & 0011 = 0001)
  print('m | n ‚Üí ${m | n}');   // 7  (0101 | 0011 = 0111)
  print('m ^ n ‚Üí ${m ^ n}');   // 6  (0101 ^ 0011 = 0110)
  print('~m ‚Üí ${~m}');         // -6 (bitwise NOT)
  print('m << 1 ‚Üí ${m << 1}'); // 10 (shift left)
  print('m >> 1 ‚Üí ${m >> 1}'); // 2  (shift right)

  // ======================
  // üîπ Summary of all operators (‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™)
  // ======================
  /*
  1. Arithmetic ‚Üí +, -, *, /, ~/ , %  (‡¶ó‡¶æ‡¶£‡¶ø‡¶§‡¶ø‡¶ï)
  2. Assignment ‚Üí =, +=, -=, *=, /=, ~/=, %= (value update)
  3. Comparison ‚Üí ==, !=, >, <, >=, <= (‡¶§‡ßÅ‡¶≤‡¶®‡¶æ)
  4. Logical ‚Üí &&, ||, ! (Boolean logic)
  5. Type test ‚Üí is, is! (‡¶ü‡¶æ‡¶á‡¶™ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ)
  6. Conditional ‚Üí condition ? expr1 : expr2 (inline if-else)
  7. Null-aware ‚Üí ??, ??=, ?. (null safe code)
  8. Cascade ‚Üí .. (‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï method ‡¶è‡¶ï ‡¶≤‡¶æ‡¶á‡¶®‡ßá)
  9. Bitwise ‚Üí &, |, ^, ~, <<, >> (binary operation)
  */
}
