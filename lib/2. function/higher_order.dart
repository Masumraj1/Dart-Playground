// ======================
// Dart Higher-Order Functions (Bangla Explainer)
// ======================

void main() {
  // ======================
  // 1Ô∏è‚É£ Higher-Order Function ‡¶ï‡ßÄ?
  // ======================
  /*
  Higher-Order Function ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶è‡¶Æ‡¶® function ‡¶Ø‡ßá‡¶ü‡¶æ ‚Äî
  üîπ ‡¶Ö‡¶®‡ßç‡¶Ø function ‡¶ï‡ßá parameter ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶®‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá
  üîπ ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶ï‡ßã‡¶®‡ßã function return ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá

  ‡¶∏‡¶π‡¶ú‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶≤‡¶≤‡ßá:
  Function ‚Üí ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶Ü‡¶∞‡ßá‡¶ï‡¶ü‡¶æ function ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá, ‡¶∏‡ßá‡¶ü‡¶æ‡¶á Higher-Order Function!
  */

  // ======================
  // 2Ô∏è‚É£ Function ‡¶ï‡ßá parameter ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
  // ======================
  void calculate(int a, int b, Function operation) {
    print('Result: ${operation(a, b)}');
  }

  // ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶Æ‡¶∞‡¶æ function parameter ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶¨‡ßã
  int add(int x, int y) => x + y;
  int multiply(int x, int y) => x * y;

  calculate(5, 3, add);       // Output: 8
  calculate(5, 3, multiply);  // Output: 15

  // Anonymous function ‡¶¶‡¶ø‡ßü‡ßá‡¶ì ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü
  calculate(10, 2, (x, y) => x - y); // Output: 8

  // ======================
  // 3Ô∏è‚É£ Function return ‡¶ï‡¶∞‡¶æ (Function inside Function)
  // ======================
  /*
  ‡¶ï‡ßã‡¶®‡ßã function ‡¶•‡ßá‡¶ï‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø function return ‡¶ï‡¶∞‡¶≤‡ßá‡¶ì ‡¶∏‡ßá‡¶ü‡¶æ Higher-Order Function‡•§
  */

  Function greet(String name) {
    return () {
      print('Welcome, $name!');
    };
  }

  var sayHello = greet('Masum');
  sayHello(); // Output: Welcome, Masum!

  // ======================
  // 4Ô∏è‚É£ Built-in Higher-Order Functions (map, where, forEach ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø)
  // ======================
  /*
  Dart-‡¶è‡¶∞ ‡¶Ö‡¶®‡ßá‡¶ï built-in function ‡¶Ü‡¶∏‡¶≤‡ßá Higher-Order Function‡•§
  ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶§‡¶æ‡¶∞‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø function parameter ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶®‡ßá‡ßü‡•§
  */

  List<int> numbers = [1, 2, 3, 4, 5];

  // map ‚Üí ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø element ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡ßá ‡¶®‡¶§‡ßÅ‡¶® List ‡¶¶‡ßá‡ßü
  var squared = numbers.map((n) => n * n).toList();
  print('Squared List: $squared'); // [1, 4, 9, 16, 25]

  // where ‚Üí ‡¶∂‡¶∞‡ßç‡¶§ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ element ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá
  var even = numbers.where((n) => n % 2 == 0).toList();
  print('Even Numbers: $even'); // [2, 4]

  // forEach ‚Üí ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø element ‡¶è‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá
  numbers.forEach((n) {
    print('Number: $n');
  });

  // ======================
  // 5Ô∏è‚É£ Real-life Example: Custom Filter Function
  // ======================
  /*
  ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶®‡¶ø‡¶ú‡ßá Higher-Order Function ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø ‡¶Ø‡ßá‡¶ü‡¶æ
  ‡¶è‡¶ï‡¶ü‡¶æ function parameter ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶®‡ßá‡ßü ‚Äî ‡¶Ø‡ßá‡¶Æ‡¶® custom filtering‡•§
  */

  List<String> names = ['Masum', 'Rana', 'Rahim', 'Karim'];

  List<String> filterNames(List<String> list, bool Function(String) condition) {
    return list.where(condition).toList();
  }

  // ‡¶∂‡¶∞‡ßç‡¶§: ‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶¶‡ßà‡¶∞‡ßç‡¶ò‡ßç‡¶Ø ‡ß´ ‡¶è‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶π‡¶≤‡ßá ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá
  var longNames = filterNames(names, (name) => name.length > 4);
  print('Long Names: $longNames'); // [Masum, Rahim, Karim]

  // ======================
  // 6Ô∏è‚É£ Function returning Function (Multiplier Example)
  // ======================
  /*
  ‡¶è‡¶ñ‡¶æ‡¶®‡ßá outer function ‡¶è‡¶ï‡¶ü‡¶ø inner function return ‡¶ï‡¶∞‡¶õ‡ßá‡•§
  */

  Function makeMultiplier(int factor) {
    return (int value) => value * factor;
  }

  var doubleIt = makeMultiplier(2);
  var tripleIt = makeMultiplier(3);

  print('Double 5 ‚Üí ${doubleIt(5)}'); // 10
  print('Triple 5 ‚Üí ${tripleIt(5)}'); // 15

  // ======================
  // 7Ô∏è‚É£ Summary (‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™)
  // ======================
  /*
  üîπ Higher-Order Function = function ‡¶Ø‡ßá‡¶ü‡¶æ:
     ‚Üí function parameter ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶®‡ßá‡ßü
     ‚Üí function return ‡¶ï‡¶∞‡ßá

  üîπ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:
     - forEach(), map(), where(), reduce() ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø built-in methods
     - reusable logic ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá
     - cleaner functional code ‡¶≤‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

  üîπ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
     - calculate(add/multiply)
     - greet() function ‡¶•‡ßá‡¶ï‡ßá function return
     - custom filter function
     - makeMultiplier() dynamic logic generator
  */
}
