// ======================
// Dart Anonymous Functions (‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ Bangla Guide)
// ======================

void main() {
  // ======================
  // 1Ô∏è‚É£ Anonymous Function ‡¶ï‡¶ø?
  // ======================
  /*
  Anonymous Function ‡¶π‡¶≤‡ßã ‡¶è‡¶Æ‡¶® ‡¶è‡¶ï‡¶ü‡¶ø function ‡¶Ø‡¶æ‡¶∞ ‡¶ï‡ßã‡¶® ‡¶®‡¶æ‡¶Æ ‡¶®‡ßá‡¶á‡•§
  ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶è‡¶ü‡¶ø‡¶ï‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø variable ‡¶è assign ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø ‡¶¨‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø function ‡¶è‡¶∞ argument ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§
  ‡¶Æ‡ßÇ‡¶≤‡¶§ temporary ‡¶¨‡¶æ ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§ function ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§
  */

  // Example:
  var greet = (String name) {
    print('Hello, $name!');
  };

  greet('Masum'); // Output: Hello, Masum!

  // ======================
  // 2Ô∏è‚É£ Anonymous Function as Argument (Higher-order functions)
  // ======================
  /*
  Dart ‡¶è ‡¶Ö‡¶®‡ßá‡¶ï method ‡¶Ü‡¶õ‡ßá ‡¶Ø‡¶æ function parameter ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶®‡ßá‡ßü‡•§
  ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: List.forEach(), List.map(), List.where() ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø
  */

  List<int> numbers = [1, 2, 3, 4, 5];

  // forEach method ‡¶è anonymous function
  numbers.forEach((number) {
    print('Number * 2 = ${number * 2}');
  });

  // ======================
  // 3Ô∏è‚É£ Anonymous Function with Return Value
  // ======================
  /*
  Anonymous function ‡¶∂‡ßÅ‡¶ß‡ßÅ output return ‡¶ï‡¶∞‡¶§‡ßá‡¶ì ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§
  */

  var square = (int n) {
    return n * n;
  };

  print('Square of 5: ${square(5)}'); // Output: 25

  // ======================
  // 4Ô∏è‚É£ Arrow Syntax (Single-line function)
  // ======================
  /*
  ‡¶Ø‡¶¶‡¶ø function ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø statement execute ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç return ‡¶¶‡ßá‡ßü,
  ‡¶§‡¶æ‡¶π‡¶≤‡ßá arrow syntax ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§
  */

  var triple = (int n) => n * 3;
  print('Triple of 5: ${triple(5)}'); // Output: 15

  // ======================
  // 5Ô∏è‚É£ map() method ‡¶è ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞
  // ======================
  /*
  map() ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá list ‡¶è‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø element modify ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§
  */

  List<int> nums = [1, 2, 3, 4];
  var squaredNums = nums.map((num) => num * num).toList();
  print('Squared Numbers: $squaredNums'); // Output: [1, 4, 9, 16]

  // ======================
  // 6Ô∏è‚É£ where() method ‡¶è ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ (Filter)
  // ======================
  /*
  where() ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá list ‡¶è‡¶∞ element filter ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§
  */

  var evenNumbers = nums.where((num) => num % 2 == 0).toList();
  print('Even Numbers: $evenNumbers'); // Output: [2, 4]

  // ======================
  // 7Ô∏è‚É£ Nested Anonymous Function (Anonymous function ‡¶≠‡¶ø‡¶§‡¶∞‡ßá anonymous function)
  // ======================
  /*
  Dart ‡¶è anonymous function ‡¶è‡¶∞ ‡¶≠‡¶ø‡¶§‡¶∞‡ßá ‡¶Ü‡¶∞‡ßá‡¶ï‡¶ü‡¶ø anonymous function define ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§
  ‡¶è‡¶ü‡¶ø higher-order function ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶¨ ‡¶â‡¶™‡¶ï‡¶æ‡¶∞‡ßÄ‡•§
  */

  Function outer = () {
    return (String msg) {
      print('Nested function says: $msg');
    };
  };

  var inner = outer();
  inner('Hello Dart!'); // Output: Nested function says: Hello Dart!

  // ======================
  // 8Ô∏è‚É£ Summary (‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™)
  // ======================
  /*
  üîπ Anonymous Function ‚Üí ‡¶®‡¶æ‡¶Æ ‡¶®‡ßá‡¶á ‡¶è‡¶Æ‡¶® function
  üîπ Variable ‡¶è assign ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü
  üîπ Arrow syntax ‚Üí single-line shorthand (=>)
  üîπ Higher-order function ‡¶è argument ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü
  üîπ Common methods: forEach(), map(), where()
  üîπ Nested anonymous function possible
  üîπ Use-case: temporary function, single-use, clean code
  */
}
