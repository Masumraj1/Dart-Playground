// ===============================
// Dart Arrow / Lambda Functions (Bangla Explainer)
// ===============================

void main() {
  // ===============================
  // 1Ô∏è‚É£ Arrow / Lambda Function ‡¶ï‡ßÄ?
  // ===============================
  /*
  ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ function ‡¶≤‡¶ø‡¶ñ‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶Ü‡¶Æ‡¶∞‡¶æ traditional function ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶ø‡•§
  ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶Ö‡¶®‡ßá‡¶ï ‡¶∏‡¶Æ‡ßü function ‡¶Ö‡¶®‡ßá‡¶ï ‡¶õ‡ßã‡¶ü ‡¶•‡¶æ‡¶ï‡ßá ‡¶¨‡¶æ ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø value return ‡¶ï‡¶∞‡ßá‡•§

  üîπ ‡¶è‡¶á ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶π‡¶≤‡ßã ‚Äî Arrow (=>) / Lambda function!
  ‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé ‡¶è‡¶ï ‡¶≤‡¶æ‡¶á‡¶®‡ßá‡¶∞ function ‡¶ñ‡ßÅ‡¶¨ concise‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ø‡¶ñ‡¶æ ‡¶Ø‡¶æ‡ßü‡•§
  */

  // ===============================
  // 2Ô∏è‚É£ Traditional vs Arrow Function
  // ===============================
  // Traditional function
  int add(int a, int b) {
    return a + b;
  }

  // Arrow function
  int addArrow(int a, int b) => a + b;

  print(add(2, 3));       // Output: 5
  print(addArrow(2, 3));  // Output: 5

  // ===============================
  // 3Ô∏è‚É£ Simple Return
  // ===============================
  String greet(String name) => "Hello, $name!";

  print(greet('Masum')); // Output: Hello, Masum!

  // ===============================
  // 4Ô∏è‚É£ Arrow Function with List / map / forEach
  // ===============================
  List<int> numbers = [1, 2, 3, 4];

  var squares = numbers.map((n) => n * n);
  print(squares.toList()); // Output: [1, 4, 9, 16]

  numbers.forEach((n) => print('Number: $n'));

  // ===============================
  // 5Ô∏è‚É£ Conditional Expression
  // ===============================
  String checkEvenOdd(int n) => n % 2 == 0 ? "Even" : "Odd";

  print(checkEvenOdd(5)); // Output: Odd
  print(checkEvenOdd(8)); // Output: Even

  // ===============================
  // 6Ô∏è‚É£ Anonymous Function / Lambda
  // ===============================
  var multiply = (int x, int y) => x * y;

  print(multiply(4, 5)); // Output: 20



  var c = Circle(5);
  print(c.area); // Output: 78.5
  c.updateRadius = 10;
  print(c.area); // Output: 314.0

  // ===============================
  // 8Ô∏è‚É£ Limitations
  // ===============================
  /*
  üîπ Arrow function ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø expression ‡¶®‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá
  üîπ Multiple statements ‡¶•‡¶æ‡¶ï‡¶≤‡ßá traditional function ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá
  */

  // Wrong: (Multiple statements)
  // int sum(int a, int b) => { print(a); print(b); return a + b; }; // ‚ùå Error

  // Correct: Traditional function
  int sum(int a, int b) {
  print(a);
  print(b);
  return a + b;
  }

  print(sum(2, 3)); // Output: 2 3 5

  // ===============================
  // 9Ô∏è‚É£ Summary (‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™)
  // ===============================
  /*
  üß© Arrow / Lambda Function Summary:
  -----------------------------------------
  üîπ Syntax: returnType functionName(params) => expression;
  üîπ Single-line function ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ideal
  üîπ Anonymous function ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá map, forEach, reduce ‡¶è ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü
  üîπ Getter / Setter ‡¶è ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü
  üîπ Multiple statements ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø traditional function ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®
  üîπ Code readable ‡¶è‡¶¨‡¶Ç concise ‡¶π‡ßü
  -----------------------------------------
  */
}

// ===============================
// 7Ô∏è‚É£ Arrow in Getter / Setter
// ===============================
class Circle {
  double radius;
  Circle(this.radius);

  double get area => 3.14 * radius * radius; // Getter using Arrow
  set updateRadius(double r) => radius = r;  // Setter using Arrow
}